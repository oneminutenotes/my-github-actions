# This is a basic workflow to help you get started with Actions

name: CI
run-name: Pipeline run by @${{ github.actor }}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash
    #working-directory: workdir

# workflow level
env:
  PIPE: cicd

# job level
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  checkout:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: sh
        #working-directory: test

    env:
      STAGE: dev

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5.0.0
        with:
          # The Go version to download (if necessary) and use. Supports semver spec and ranges. Be sure to enclose this option in single quotation marks.
          go-version: 1.22.1 # optional
          # Path to the go.mod or go.work file.
          #go-version-file: # optional
          # Set this option to true if you want the action to always check for the latest available version that satisfies the version spec
          #check-latest: # optional
          # Used to pull Go distributions from go-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          #token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Used to specify whether caching is needed. Set to true, if you'd like to enable caching.
          cache: false # optional, default is true
          # Used to specify the path to a dependency file - go.sum
          #cache-dependency-path: # optional
          # Target architecture for Go to use. Examples: x86, x64. Will use system architecture by default.
          #architecture: # optional

      - name: Build go
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          name: hello-go
          path: ./bin/macos-silicon-arm64
          #path: ./bin

      - run: |
          go run hello.go
          echo $GITHUB_TOKEN 
          echo $STAGE 
          echo $PIPE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  process:
    runs-on: ubuntu-latest #self-hosted
    steps:
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  report-url:
    runs-on: ubuntu-latest
    steps:
      - run: echo $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
      - run: echo ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  report-os:
    runs-on: ubuntu-latest
    steps:
      - name: check-os
        if: runner.os != 'Windows'
        run: echo "The runner's operating system is $RUNNER_OS."

  setup:
    runs-on: ubuntu-latest
    outputs:
      build-stage: ${{ steps.set-debug-stage.outputs.BUILD_STAGE }}
      #artifact-tag: ${{ steps.changelog.outputs.version }}
    steps:
      - name: Set debug
        id: set-debug-stage
        run: echo "BUILD_STAGE=debug" >> $GITHUB_OUTPUT
      - name: Get stage
        run: echo "The build stage is ${{ steps.set-debug-stage.outputs.BUILD_STAGE }}"
      #- name: Conventional Changelog Action
      #  id: changelog
      #  uses: TriPSs/conventional-changelog-action@v3.14.0

  report-stage:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Get Stage
        run: echo "The build is ${{ needs.setup.outputs.build-stage }}"

  report-stage-cleaner:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Get Stage
        env:
          BUILD_STAGE: ${{ needs.setup.outputs.build-stage }}
        run: echo "The build is $BUILD_STAGE"
      #- name: Get Artifact
      # env:
      #  ARTIFACT_TAG: ${{ needs.setup.outputs.artifact-tag }}
      #run: echo "The build is $ARTIFACT_TAG"
